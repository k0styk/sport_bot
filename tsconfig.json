{
	"extends": "ts-node/node16/tsconfig.json",

	// Most ts-node options can be specified here using their programmatic names.
	"ts-node": {
		// It is faster to skip typechecking.
		// Remove if you want ts-node to do typechecking.
		"transpileOnly": true,
		"files": true,
		"compilerOptions": {
			// compilerOptions specified here will override those declared below,
			// but *only* in ts-node.  Useful if you want ts-node and tsc to use
			// different options with a single tsconfig.json.

			/* Language and Environment */
			"target": "es2016" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
			"lib": [
				"es6"
			] /* Specify a set of bundled library declaration files that describe the target runtime environment. */,
			// "experimentalDecorators": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */
			// "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */

			/* Modules */
			"module": "commonjs" /* Specify what module code is generated. */,
			"rootDir": "./src" /* Specify the root folder within your source files. */,
			"moduleResolution": "node" /* Specify how TypeScript looks up a file from a given module specifier. */,
			"baseUrl": "." /* Specify the base directory to resolve non-relative module names. */,
			"paths": {
				"@/*": ["src/*"],
				"@/utils/*": ["src/utils/*"],
				"@/handlers/*": ["src/handlers/*"],
				"@/controllers/*": ["src/controllers/*"],
				"@/commands/*": ["src/commands/*"],
				"@/models/*": ["src/models/*"]
			} /* Specify a set of entries that re-map imports to additional lookup locations. */,
			"resolveJsonModule": true /* Enable importing .json files. */,

			/* JavaScript Support */
			"allowJs": true /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */,
			"checkJs": true /* Enable error reporting in type-checked JavaScript files. */,

			/* Emit */
			"sourceMap": true /* Create source map files for emitted JavaScript files. */,
			"outDir": "./.ts-node" /* Specify an output folder for all emitted files. */,
			"removeComments": true /* Disable emitting comments. */,
			"noEmit": true,

			/* Interop Constraints */
			"allowSyntheticDefaultImports": true /* Allow 'import x from y' when a module doesn't have a default export. */,
			"esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
			"forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,

			/* Type Checking */
			//"strict": true /* Enable all strict type-checking options. */,
			"noImplicitAny": true /* Enable error reporting for expressions and declarations with an implied 'any' type. */,
			"strictNullChecks": true /* When type checking, take into account 'null' and 'undefined'. */,
			"strictFunctionTypes": true /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */,
			"strictBindCallApply": true /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */,
			"strictPropertyInitialization": true /* Check for class properties that are declared but not set in the constructor. */,
			"noImplicitThis": true /* Enable error reporting when 'this' is given the type 'any'. */,
			"alwaysStrict": true /* Ensure 'use strict' is always emitted. */,
			"noUnusedLocals": true /* Enable error reporting when local variables aren't read. */,
			"noUnusedParameters": true /* Raise an error when a function parameter isn't read. */,
			"noFallthroughCasesInSwitch": true /* Enable error reporting for fallthrough cases in switch statements. */,
			"noUncheckedIndexedAccess": true /* Add 'undefined' to a type when accessed using an index. */,

			/* Completeness */
			"skipLibCheck": true /* Skip type checking all .d.ts files. */
		}
	},
	"compilerOptions": {
		/* Language and Environment */
		"target": "es2016" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
		"lib": [
			"es6"
		] /* Specify a set of bundled library declaration files that describe the target runtime environment. */,
		// "experimentalDecorators": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */
		// "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */

		/* Modules */
		"module": "commonjs" /* Specify what module code is generated. */,
		"rootDir": "./src" /* Specify the root folder within your source files. */,
		"moduleResolution": "node" /* Specify how TypeScript looks up a file from a given module specifier. */,
		"baseUrl": "." /* Specify the base directory to resolve non-relative module names. */,
		"paths": {
			"@/*": ["src/*"],
			"@/utils/*": ["src/utils/*"],
			"@/handlers/*": ["src/handlers/*"],
			"@/controllers/*": ["src/controllers/*"],
			"@/commands/*": ["src/commands/*"],
			"@/models/*": ["src/models/*"]
		} /* Specify a set of entries that re-map imports to additional lookup locations. */,
		"resolveJsonModule": true /* Enable importing .json files. */,

		/* JavaScript Support */
		"allowJs": true /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */,
		"checkJs": true /* Enable error reporting in type-checked JavaScript files. */,

		/* Emit */
		"sourceMap": true /* Create source map files for emitted JavaScript files. */,
		"outDir": "./build" /* Specify an output folder for all emitted files. */,
		"removeComments": true /* Disable emitting comments. */,

		/* Interop Constraints */
		"allowSyntheticDefaultImports": true /* Allow 'import x from y' when a module doesn't have a default export. */,
		"esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
		"forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,

		/* Type Checking */
		//"strict": true /* Enable all strict type-checking options. */,
		"noImplicitAny": true /* Enable error reporting for expressions and declarations with an implied 'any' type. */,
		"strictNullChecks": true /* When type checking, take into account 'null' and 'undefined'. */,
		"strictFunctionTypes": true /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */,
		"strictBindCallApply": true /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */,
		"strictPropertyInitialization": true /* Check for class properties that are declared but not set in the constructor. */,
		"noImplicitThis": true /* Enable error reporting when 'this' is given the type 'any'. */,
		//"alwaysStrict": true /* Ensure 'use strict' is always emitted. */,
		//"noUnusedLocals": true /* Enable error reporting when local variables aren't read. */,
		// "noUnusedParameters": true /* Raise an error when a function parameter isn't read. */,
		"noFallthroughCasesInSwitch": true /* Enable error reporting for fallthrough cases in switch statements. */,
		"noUncheckedIndexedAccess": true /* Add 'undefined' to a type when accessed using an index. */,

		/* Completeness */
		"skipLibCheck": true /* Skip type checking all .d.ts files. */
	},
	"include": ["./src/**/*"]
}
